---
format:
  html:
    code-fold: false
jupyter: 
  kernelspec:
    display_name: simplextree
    language: python
    name: python3
execute: 
  freeze: auto
  enabled: true
---

# Overview of the `simplextree` package

A _simplicial complex_ $S$ is a pair $S = (V, \Sigma)$ where $V$ is a vertex set and $\Sigma \subseteq \mathcal{P}(V)$ is a collection of _simplices_ satisfying: 

1. If $v \in V$, then $\{v\} \in \Sigma$
2. If $\tau \subset \sigma$ for some $\sigma \in \Sigma$, then $\tau \in \Sigma$

Simplicial complexes generalize [graphs](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)). Like graphs, there are many ways to represent simplicial complexes in memory. One such way is to use a _Simplex Tree_: an ordered, [trie](https://en.wikipedia.org/wiki/Trie)-like structure whose nodes are in bijection with the faces of the complex. Here's a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):

![Picture taken from Boissonnat et al: "The simplex tree: An efficient data structure for general simplicial complexes"](../static/simplextree.png){.preview-image}

To construct the complex above with a `simplextree` package, simply give the maximal simplices: 

```{python}
from simplextree import SimplexTree
st = SimplexTree([[1,2,3],[2,3,4,5],[6,7,9],[7,8],[10]]) # complex form the picture
print(st)
```

To look at the tree structure, use `print_tree` (see also: `print_cousins`)
```{python}
st.print_tree()
```

To maintain fast coface lookup and enumeration, extra links are added between nodes at the same level, which are shown by the dash-dotted lines in the figure above (only for the nodes with the label $5$). To view these links with the `SimplexTree` class, use `print_cousins()`:
```{python}
st.print_cousins()
```

<!-- Various subsets of the complex can be parameterized by a starting simplex.  -->