{
  "hash": "ce3705ecba9bb3a76abf28b216fd8fc6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat:\n  html:\n    code-fold: false\njupyter: \n  kernelspec:\n    display_name: simplextree\n    language: python\n    name: python3\nexecute: \n  freeze: auto\n  enabled: true\n---\n\n\n\n\n# Overview of the `simplextree` package\n\nA _simplicial complex_ $S$ is a pair $S = (V, \\Sigma)$ where $V$ is a vertex set and $\\Sigma \\subseteq \\mathcal{P}(V)$ is a collection of _simplices_ satisfying: \n\n1. If $v \\in V$, then $\\{v\\} \\in \\Sigma$\n2. If $\\tau \\subset \\sigma$ for some $\\sigma \\in \\Sigma$, then $\\tau \\in \\Sigma$\n\nSimplicial complexes generalize [graphs](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)). Like graphs, there are many ways to represent simplicial complexes in memory. One such way is to use a _Simplex Tree_: an ordered, [trie](https://en.wikipedia.org/wiki/Trie)-like structure whose nodes are in bijection with the faces of the complex. Here's a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):\n\n![Picture taken from Boissonnat et al: \"The simplex tree: An efficient data structure for general simplicial complexes\"](../static/simplextree.png){.preview-image}\n\nTo construct the complex above with a `simplextree` package, simply give the maximal simplices: \n\n::: {#7fb09ba0 .cell execution_count=2}\n``` {.python .cell-code}\nfrom simplextree import SimplexTree\nst = SimplexTree([[1,2,3],[2,3,4,5],[6,7,9],[7,8],[10]]) # complex form the picture\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimplex Tree with (10, 12, 6, 1) (0, 1, 2, 3)-simplices\n```\n:::\n:::\n\n\nTo look at the tree structure, use `print_tree` (see also: `print_cousins`)\n\n::: {#48d62119 .cell execution_count=3}\n``` {.python .cell-code}\nst.print_tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 (h = 2): .( 2 3 )..( 3 )\n2 (h = 3): .( 3 4 5 )..( 4 5 5 )...( 5 )\n3 (h = 2): .( 4 5 )..( 5 )\n4 (h = 1): .( 5 )\n5 (h = 0): \n6 (h = 2): .( 7 9 )..( 9 )\n7 (h = 1): .( 8 9 )\n8 (h = 0): \n9 (h = 0): \n10 (h = 0): \n```\n:::\n:::\n\n\nTo maintain fast coface lookup and enumeration, extra links are added between nodes at the same level, which are shown by the dash-dotted lines in the figure above (only for the nodes with the label $5$). To view these links with the `SimplexTree` class, use `print_cousins()`:\n\n::: {#1415888e .cell execution_count=4}\n``` {.python .cell-code}\nst.print_cousins()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(last=2, depth=2): { 1 2 } \n(last=3, depth=2): { 1 3 } { 2 3 } \n(last=4, depth=2): { 2 4 } { 3 4 } \n(last=5, depth=2): { 2 5 } { 3 5 } { 4 5 } \n(last=7, depth=2): { 6 7 } \n(last=8, depth=2): { 7 8 } \n(last=9, depth=2): { 6 9 } { 7 9 } \n(last=3, depth=3): { 1 2 3 } \n(last=4, depth=3): { 2 3 4 } \n(last=5, depth=3): { 2 3 5 } { 2 4 5 } { 3 4 5 } \n(last=9, depth=3): { 6 7 9 } \n(last=5, depth=4): { 2 3 4 5 } \n```\n:::\n:::\n\n\n<!-- Various subsets of the complex can be parameterized by a starting simplex.  -->\n\n",
    "supporting": [
      "overview_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}