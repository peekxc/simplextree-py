# SimplexTree { #simplextree.SimplexTree }

`SimplexTree(self, simplices=None)`

SimplexTree provides lightweight wrapper around a Simplex Tree data structure.

This class exposes a native extension module wrapping a simplex tree implemented with modern C++.

The Simplex Tree was originally introduced in the paper:
> Boissonnat, Jean-Daniel, and Cl√©ment Maria. "The simplex tree: An efficient data structure for general simplicial complexes." Algorithmica 70.3 (2014): 406-427.

## Attributes

| Name        | Type    | Description                          |
|-------------|---------|--------------------------------------|
| n_simplices | ndarray | number of simplices                  |
| dimension   | int     | maximal dimension of the complex     |
| id_policy   | str     | policy for generating new vertex ids |

## Properties

| Name                 | Type    | Description                 |
|----------------------|---------|-----------------------------|
| vertices             | ndarray | 0-simplices in the complex. |
| edges                | ndarray | 1-simplices in the complex. |
| triangles            | ndarray | 2-simplices in the complex. |
| quads                | ndarray | 3-simplices in the complex. |
| connected_components | ndarray | connected component ids.    |

## Methods

| Name | Description |
| --- | --- |
| [adjacent](#simplextree.SimplexTree.adjacent) | Checks for adjacencies between simplices. |
| [card](#simplextree.SimplexTree.card) | Returns the cardinality of various skeleta of the complex. |
| [coface_roots](#simplextree.SimplexTree.coface_roots) | Returns the roots whose subtrees span the cofaces of `sigma`. |
| [cofaces](#simplextree.SimplexTree.cofaces) | Returns the cofaces of `sigma`. |
| [collapse](#simplextree.SimplexTree.collapse) | Performs an elementary collapse on two given simplices.  |
| [degree](#simplextree.SimplexTree.degree) | Computes the degree of select vertices in the trie. |
| [expand](#simplextree.SimplexTree.expand) | Performs a k-expansion of the complex. |
| [faces](#simplextree.SimplexTree.faces) | Wrapper for simplices function. |
| [find](#simplextree.SimplexTree.find) | Finds whether simplices exist in Simplex Tree.  |
| [insert](#simplextree.SimplexTree.insert) | Inserts simplices into the Simplex Tree.  |
| [link](#simplextree.SimplexTree.link) | Returns the simplices in the link of `sigma`. |
| [maximal](#simplextree.SimplexTree.maximal) | Returns the maximal simplices in the complex. |
| [reindex](#simplextree.SimplexTree.reindex) | Reindexes the vertex labels of the complex. |
| [remove](#simplextree.SimplexTree.remove) | Removes simplices into the Simplex Tree.  |
| [simplices](#simplextree.SimplexTree.simplices) | Returns the p-simplices in the complex. |
| [skeleton](#simplextree.SimplexTree.skeleton) | Returns the simplices in the p-skeleton of `sigma`. |
| [traverse](#simplextree.SimplexTree.traverse) | Traverses the simplex tree in the specified order, calling `f` on each simplex encountered. |
| [vertex_collapse](#simplextree.SimplexTree.vertex_collapse) | Maps a pair of vertices into a single vertex.  |

### adjacent { #simplextree.SimplexTree.adjacent }

`SimplexTree.adjacent(self, simplices)`

Checks for adjacencies between simplices.

### card { #simplextree.SimplexTree.card }

`SimplexTree.card(self, p=None)`

Returns the cardinality of various skeleta of the complex.

#### Parameters

**p** : <span class='type_annotation'> int, </span>optional (default=None)<p> dimension parameter. Defaults to None. </p>

#### Returns

**cardinalities** : <span class='type_annotation'> Union[int, tuple], </span><p> if p is an integer, the number of p-simplices in the complex. Otherwise a tuple indicating the number of simplices of all dimensions. </p>

### coface_roots { #simplextree.SimplexTree.coface_roots }

`SimplexTree.coface_roots(self, sigma=\[\])`

Returns the roots whose subtrees span the cofaces of `sigma`.

Note that `sigma` itself is included in the set of its cofaces. 

#### Parameters

**sigma** : <span class='type_annotation'> Collection, </span>optional (default=[])<p> the simplex to obtain cofaces of. Defaults to the empty set (root node). </p>

#### Returns

**coface_roots** : <span class='type_annotation'> list[Collection], </span><p> the coface roots of `sigma`. </p>

### cofaces { #simplextree.SimplexTree.cofaces }

`SimplexTree.cofaces(self, sigma=\[\])`

Returns the cofaces of `sigma`.

Note, by definition, `sigma` itself is considered as a coface.

#### Parameters

**sigma** : <span class='type_annotation'> Collection, </span>optional (default=[])<p> the simplex to obtain cofaces of. </p>

#### Returns

**cofaces** : <span class='type_annotation'> list[Collection], </span><p> the cofaces of `sigma`. </p>

### collapse { #simplextree.SimplexTree.collapse }

`SimplexTree.collapse(self, tau, sigma)`

Performs an elementary collapse on two given simplices. 

Checks whether its possible to collapse $\sigma$ through $\tau$, and if so, both simplices are removed. 
A simplex $\sigma$ is said to be collapsible through one of its faces $\tau$ if $\sigma$ is the only coface of $\tau$ (excluding $\tau$ itself). 

#### Parameters

**sigma** : <span class='type_annotation'> Collection, </span>required<p> maximal simplex to collapse </p>

**tau** : <span class='type_annotation'> Collection, </span>required<p> face of sigma to collapse  </p>

#### Returns

**collapsed** : <span class='type_annotation'> bool, </span><p> whether the pair was collapsed </p>

#### Examples

from splex import SimplexTree 
st = SimplexTree([[0,1,2]])
print(st)

st.collapse([1,2], [0,1,2])

print(st)

### degree { #simplextree.SimplexTree.degree }

`SimplexTree.degree(self, vertices=None)`

Computes the degree of select vertices in the trie.

#### Parameters

**vertices** : <span class='type_annotation'> ArrayLike, </span>optional (default=None)<p> Retrieves vertex degrees
If no vertices are specified, all degrees are computed. Non-existing vertices by default have degree 0.  </p>

#### Returns

**degrees** : <span class='type_annotation'> Union[ArrayLike, int], </span><p> degree of each vertex id given in 'vertices'. </p>

### expand { #simplextree.SimplexTree.expand }

`SimplexTree.expand(self, k, f=None)`

Performs a k-expansion of the complex.

This function is particularly useful for expanding clique complexes beyond their 1-skeleton. 

#### Parameters

**k** : <span class='type_annotation'> int, </span>required<p> maximum dimension to expand to.  </p>

**f** : <span class='type_annotation'> Callable[[Collection], bool], </span>optional (default=None)<p> boolean predicate which returns whether a simplex should added to the complex (and further expanded).  </p>

#### Examples

from simplextree import SimplexTree 
from itertools import combinations 
st = SimplexTree(combinations(range(8), 2))
print(st)

st.expand(k=2, lambda s: 2 in s)  # Expand only triangles containing 2 as a vertex
print(st)

st.expand(k=2) # Expand all 2-cliques
print(st)

### faces { #simplextree.SimplexTree.faces }

`SimplexTree.faces(self, p=None, sigma=\[\], **kwargs)`

Wrapper for simplices function.

### find { #simplextree.SimplexTree.find }

`SimplexTree.find(self, simplices)`

Finds whether simplices exist in Simplex Tree. 

#### Parameters

**simplices** : <span class='type_annotation'> Iterable[Collection], </span>required<p> Iterable of simplices to insert (each of which are SimplexLike) </p>

#### Returns

**found** : <span class='type_annotation'> np.ndarray, </span><p> boolean array indicating whether each simplex was found in the complex </p>

::: {.callout-note}
        If the iterable is an 2-dim np.ndarray, then the p-simplex to find is given by each contiguous p+1 stride.
        Otherwise, each element of the iterable to casted to a Simplex and then searched for in the tree. 
:::

### insert { #simplextree.SimplexTree.insert }

`SimplexTree.insert(self, simplices)`

Inserts simplices into the Simplex Tree. 

By definition, inserting a simplex also inserts all of its faces. If the simplex already exists in the complex, the tree is not modified. 

#### Parameters

**simplices** : <span class='type_annotation'> Iterable[Collection], </span>required<p> Iterable of simplices to insert (each of which are SimplexLike) </p>

::: {.callout-note}
        If the iterable is an 2-dim np.ndarray, then a p-simplex is inserted along each contiguous p+1 stride.
        Otherwise, each element of the iterable to casted to a Simplex and then inserted into the tree. 
:::

#### Examples

```{python}
from simplextree import SimplexTree
st = SimplexTree([range(3)])
print(st)
```
```{python}
st.insert([[0,1]])
print(st)
```

print(st)

### link { #simplextree.SimplexTree.link }

`SimplexTree.link(self, sigma=\[\])`

Returns the simplices in the link of `sigma`.

### maximal { #simplextree.SimplexTree.maximal }

`SimplexTree.maximal(self)`

Returns the maximal simplices in the complex.

### reindex { #simplextree.SimplexTree.reindex }

`SimplexTree.reindex(self, labels=None)`

Reindexes the vertex labels of the complex.

### remove { #simplextree.SimplexTree.remove }

`SimplexTree.remove(self, simplices)`

Removes simplices into the Simplex Tree. 

By definition, removing a face also removes all of its cofaces. If the simplex does not exist in the complex, the tree is not modified. 

#### Parameters

**simplices** : <span class='type_annotation'> Iterable[Collection], </span>required<p> Iterable of simplices to insert (each of which are SimplexLike).              </p>

::: {.callout-note}
        If the iterable is an 2-dim np.ndarray, then a p-simplex is removed along each contiguous p+1 stride.
        Otherwise, each element of the iterable to casted to a Simplex and then removed from the tree. 
:::

#### Examples

st = SimplexTree([range(3)])
print(st)
st.remove([[0,1]])
print(st)

### simplices { #simplextree.SimplexTree.simplices }

`SimplexTree.simplices(self, p=None)`

Returns the p-simplices in the complex.

### skeleton { #simplextree.SimplexTree.skeleton }

`SimplexTree.skeleton(self, p=None, sigma=\[\])`

Returns the simplices in the p-skeleton of `sigma`.

Note that, when dim(`sigma`) <= `p`, `sigma` is included in the skeleton. 

#### Parameters

**p** : <span class='type_annotation'> int, </span>optional (default=None)<p> the dimension of the skeleton. </p>

**sigma** : <span class='type_annotation'> Collection, </span>optional (default=[])<p> the simplex to obtain cofaces of. Defaults to the empty set (root node). </p>

#### Returns

**list** : <span class='type_annotation'> Iterable[Collection], </span><p> the simplices in the p-skeleton of `sigma`. </p>

### traverse { #simplextree.SimplexTree.traverse }

`SimplexTree.traverse(self, order='preorder', f=print, sigma=\[\], p=0)`

Traverses the simplex tree in the specified order, calling `f` on each simplex encountered.

Supported traversals include breadth-first / level order ("bfs", "levelorder"), depth-first / prefix ("dfs", "preorder").
faces, cofaces, coface roots ("coface_roots"), p-skeleton, p-simplices, maximal simplices ("maximal"), and link. 

Where applicable, each traversal begins its traversal `sigma`, which defaults to the empty set (root node). 

#### Parameters

**order** : <span class='type_annotation'> str, </span>optional (default='preorder')<p> the type of traversal of the simplex tree to execute. </p>

**f** : <span class='type_annotation'> Callable, </span>optional (default=print)<p> a function to evaluate on every simplex in the traversal. Defaults to print.  </p>

**sigma** : <span class='type_annotation'> Collection, </span>optional (default=[])<p> simplex to start the traversal at, where applicable. Defaults to the root node (empty set). </p>

**p** : <span class='type_annotation'> int, </span>optional (default=0)<p> dimension of simplices to restrict to, where applicable. Defaults to 0. </p>

### vertex_collapse { #simplextree.SimplexTree.vertex_collapse }

`SimplexTree.vertex_collapse(self, u, v, w)`

Maps a pair of vertices into a single vertex. 

#### Parameters

**u** : <span class='type_annotation'> int, </span>required<p> the first vertex in the free pair. </p>

**v** : <span class='type_annotation'> int, </span>required<p> the second vertex in the free pair.  </p>

**w** : <span class='type_annotation'> int, </span>required<p> the target vertex to collapse to. </p>

#### Returns

**collapsed** : <span class='type_annotation'> bool, </span><p> whether the collapse was performed. </p>