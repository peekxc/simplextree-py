---
format:
  html:
    code-fold: false
jupyter: 
  kernelspec:
    display_name: simplextree
    language: python
    name: python3
execute: 
  freeze: auto
  enabled: true
---

# Overview: Simplicial Complexes

A _simplicial complex_ $S$ is a pair $S = (V, \Sigma)$ where $V$ is a vertex set and $\Sigma$ a collection of _simplices_ $s \in \Sigma$ satisfying: 

1. If $v \in V$, then $v \in S$
2. If $\tau \subset \sigma$ and $\sigma \in S$, then $\tau \in S$

A simplicial complex is a natural generalization of a [graph](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics))---any graph can also be represented by a simplicial complex (though the converse is not true!). 

Like graphs, there are many ways to represent simplicial complexes in memory. One such way is to use a _simplex tree_: an ordered, trie-like structure whose nodes are in bijection with the faces of the complex. Here's a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):

![simplextree](static/simplextree_pic.png){.preview-image}

To construct the complex above with a `simplextree` package, simply give the maximal simplices: 

```{python}
from simplextree import SimplexTree
st = SimplexTree([[1,2,3],[2,3,4,5],[6,7,9],[7,8],[10]]) # complex form the picture
print(st)
```

To look at the tree structure, use `print_tree` (see also: `print_cousins`)
```{python}
st.print_tree()
```


