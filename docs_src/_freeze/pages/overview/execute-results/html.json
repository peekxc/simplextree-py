{
  "hash": "aeb34d599652874c9e64fcfdc516e2f3",
  "result": {
    "markdown": "---\nformat:\n  html:\n    code-fold: false\nexecute:\n  freeze: auto\n  enabled: true\ntitle: 'Overview: Simplicial Complexes'\n---\n\n\n\n\n\nA _simplicial complex_ $S$ is a pair $S = (V, \\Sigma)$ where $V$ is a vertex set and $\\Sigma$ a collection of _simplices_ $s \\in \\Sigma$ satisfying: \n\n1. If $v \\in V$, then $v \\in S$\n2. If $\\tau \\subset \\sigma$ and $\\sigma \\in S$, then $\\tau \\in S$\n\nA simplicial complex is a natural generalization of a [graph](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics))---any graph can also be represented by a simplicial complex (though the converse is not true!). \n\nLike graphs, there are many ways to represent simplicial complexes in memory. One such way is to use a _simplex tree_: an ordered, trie-like structure whose nodes are in bijection with the faces of the complex. Here's a picture (from the paper) of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):\n\n![simplextree](static/simplextree_pic.png){.preview-image}\n\nThe `simplextree` Python package exports an efficient class implementation of the _simplex tree_ data structure. \nTo construct the complex above with a simplex tree, it suffices to give the maximal simplices: \n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom simplextree import SimplexTree\nst = SimplexTree([[1,2,3],[2,3,4,5],[6,7,9],[7,8],[10]]) # complex form the picture\nprint(st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimplex Tree with (10, 12, 6, 1) (0, 1, 2, 3)-simplices\n```\n:::\n:::\n\n\nTo look at the tree structure, use `print_tree` (see also: `print_cousins`)\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nst.print_tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 (h = 2): .( 2 3 )..( 3 )\n2 (h = 3): .( 3 4 5 )..( 4 5 5 )...( 5 )\n3 (h = 2): .( 4 5 )..( 5 )\n4 (h = 1): .( 5 )\n5 (h = 0): \n6 (h = 2): .( 7 9 )..( 9 )\n7 (h = 1): .( 8 9 )\n8 (h = 0): \n9 (h = 0): \n10 (h = 0): \n```\n:::\n:::\n\n\nThe supported operations include: \n\n",
    "supporting": [
      "overview_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}