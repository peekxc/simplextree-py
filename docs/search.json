[
  {
    "objectID": "pages/overview.html",
    "href": "pages/overview.html",
    "title": "Overview of the simplextree package",
    "section": "",
    "text": "A simplicial complex S is a pair S = (V, \\Sigma) where V is a vertex set and \\Sigma a collection of simplices s \\in \\Sigma satisfying:\n\nIf v \\in V, then v \\in S\nIf \\tau \\subset \\sigma and \\sigma \\in S, then \\tau \\in S\n\nA simplicial complex is a natural generalization of a graph—any graph can also be represented by a simplicial complex (though the converse is not true!).\nLike graphs, there are many ways to represent simplicial complexes in memory. One such way is to use a Simplex Tree: an ordered, trie-like structure whose nodes are in bijection with the faces of the complex. Here’s a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):\n\n\n\nPicture taken from Boissonnat et al: “The simplex tree: An efficient data structure for general simplicial complexes”\n\n\nTo construct the complex above with a simplextree package, simply give the maximal simplices:\n\nfrom simplextree import SimplexTree\nst = SimplexTree([[1,2,3],[2,3,4,5],[6,7,9],[7,8],[10]]) # complex form the picture\nprint(st)\n\nSimplex Tree with (10, 12, 6, 1) (0, 1, 2, 3)-simplices\n\n\nTo look at the tree structure, use print_tree (see also: print_cousins)\n\nst.print_tree()\n\n1 (h = 2): .( 2 3 )..( 3 )\n2 (h = 3): .( 3 4 5 )..( 4 5 5 )...( 5 )\n3 (h = 2): .( 4 5 )..( 5 )\n4 (h = 1): .( 5 )\n5 (h = 0): \n6 (h = 2): .( 7 9 )..( 9 )\n7 (h = 1): .( 8 9 )\n8 (h = 0): \n9 (h = 0): \n10 (h = 0): \n\n\nTo maintain fast coface lookup and enumeration, extra links are added between nodes at the same level, which are shown by the dash-dotted lines in the figure above (only for the nodes with the label 5). To view these links with the SimplexTree class, use print_cousins():\n\nst.print_cousins()\n\n(last=2, depth=2): { 1 2 } \n(last=3, depth=2): { 1 3 } { 2 3 } \n(last=4, depth=2): { 2 4 } { 3 4 } \n(last=5, depth=2): { 2 5 } { 3 5 } { 4 5 } \n(last=7, depth=2): { 6 7 } \n(last=8, depth=2): { 7 8 } \n(last=9, depth=2): { 6 9 } { 7 9 } \n(last=3, depth=3): { 1 2 3 } \n(last=4, depth=3): { 2 3 4 } \n(last=5, depth=3): { 2 3 5 } { 2 4 5 } { 3 4 5 } \n(last=9, depth=3): { 6 7 9 } \n(last=5, depth=4): { 2 3 4 5 }"
  },
  {
    "objectID": "pages/index.html",
    "href": "pages/index.html",
    "title": "simplextree",
    "section": "",
    "text": "simplextree is an Python package that simplifies computation for general simplicial complexes of any dimension by providing pybind11 bindings to a Simplex Tree data structure implemented in modern C++17.\nA Simplex Tree is an ordered, trie-like structure whose nodes are in bijection with the faces of the complex. Here’s a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):\nThe Simplex Tree was originally introduced in the following paper:\nThe SimplexTree class exported by the package includes support for many tree operations, e.g. insertions, removals, expansions, collapses, star/link enumerations, and other traversals."
  },
  {
    "objectID": "pages/index.html#install",
    "href": "pages/index.html#install",
    "title": "simplextree",
    "section": "Install",
    "text": "Install\nThe easiest way to install the package is via the platform-specific wheels on pypi.\npython -m pip install simplextree \nYou can also pip install the package manually by downloading the appropriate wheel (or sdist) from the releases.\nFor installation instructions for developers looking to extend the package, see Building & Developing."
  },
  {
    "objectID": "pages/index.html#building-developing",
    "href": "pages/index.html#building-developing",
    "title": "simplextree",
    "section": "Building & Developing",
    "text": "Building & Developing\nIf you would like to build the package yourself for development reasons, a typical workflow is to install the build-time dependencies first:\npython -m pip install meson-python ninja pybind11 numpy\nThen, build and install the package in editable mode (see also meson-python notes), optionally without build isolation for speed:\npython -m pip install --no-build-isolation --editable .\nUnit testing is handled with pytest. See the gh-workflows for platform-specific configuration."
  },
  {
    "objectID": "pages/index.html#native-extensions",
    "href": "pages/index.html#native-extensions",
    "title": "simplextree",
    "section": "Native Extensions",
    "text": "Native Extensions\nThe underlying C++ library is header-only and may be included as a dependency by extension modules in other Python packages.\nThus, to modify or extending the complex in C++, it is sufficient to add the package as a build-time dependency and append the include directory to the compilation target."
  }
]