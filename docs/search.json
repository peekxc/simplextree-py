[
  {
    "objectID": "pages/overview.html",
    "href": "pages/overview.html",
    "title": "Overview of the simplextree package",
    "section": "",
    "text": "A simplicial complex S is a pair S = (V, \\Sigma) where V is a vertex set and \\Sigma a collection of simplices s \\in \\Sigma satisfying:\n\nIf v \\in V, then v \\in S\nIf \\tau \\subset \\sigma and \\sigma \\in S, then \\tau \\in S\n\nA simplicial complex is a natural generalization of a graph—any graph can also be represented by a simplicial complex (though the converse is not true!).\nLike graphs, there are many ways to represent simplicial complexes in memory. One such way is to use a Simplex Tree: an ordered, trie-like structure whose nodes are in bijection with the faces of the complex. Here’s a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):\n\n\n\nPicture taken from Boissonnat et al: “The simplex tree: An efficient data structure for general simplicial complexes”\n\n\nTo construct the complex above with a simplextree package, simply give the maximal simplices:\n\nfrom simplextree import SimplexTree\nst = SimplexTree([[1,2,3],[2,3,4,5],[6,7,9],[7,8],[10]]) # complex form the picture\nprint(st)\n\nSimplex Tree with (10, 12, 6, 1) (0, 1, 2, 3)-simplices\n\n\nTo look at the tree structure, use print_tree (see also: print_cousins)\n\nst.print_tree()\n\n1 (h = 2): .( 2 3 )..( 3 )\n2 (h = 3): .( 3 4 5 )..( 4 5 5 )...( 5 )\n3 (h = 2): .( 4 5 )..( 5 )\n4 (h = 1): .( 5 )\n5 (h = 0): \n6 (h = 2): .( 7 9 )..( 9 )\n7 (h = 1): .( 8 9 )\n8 (h = 0): \n9 (h = 0): \n10 (h = 0): \n\n\nTo maintain fast coface lookup and enumeration, extra links are added between nodes at the same level, which are shown by the dash-dotted lines in the figure above (only for the nodes with the label 5). To view these links with the SimplexTree class, use print_cousins():\n\nst.print_cousins()\n\n(last=2, depth=2): { 1 2 } \n(last=3, depth=2): { 1 3 } { 2 3 } \n(last=4, depth=2): { 2 4 } { 3 4 } \n(last=5, depth=2): { 2 5 } { 3 5 } { 4 5 } \n(last=7, depth=2): { 6 7 } \n(last=8, depth=2): { 7 8 } \n(last=9, depth=2): { 6 9 } { 7 9 } \n(last=3, depth=3): { 1 2 3 } \n(last=4, depth=3): { 2 3 4 } \n(last=5, depth=3): { 2 3 5 } { 2 4 5 } { 3 4 5 } \n(last=9, depth=3): { 6 7 9 } \n(last=5, depth=4): { 2 3 4 5 }"
  },
  {
    "objectID": "pages/index.html",
    "href": "pages/index.html",
    "title": "simplextree",
    "section": "",
    "text": "simplextree is an Python package that simplifies computation for general simplicial complexes of any dimension by providing pybind11 bindings to a Simplex Tree data structure implemented in modern C++17.\nA Simplex Tree is an ordered, trie-like structure whose nodes are in bijection with the faces of the complex. Here’s a picture of a simplicial 3-complex (left) and its corresponding Simplex Tree (right):\nThe Simplex Tree was originally introduced in the following paper:\nThe SimplexTree class exported by the package includes support for many tree operations, e.g. insertions, removals, expansions, collapses, star/link enumerations, and other traversals."
  },
  {
    "objectID": "pages/index.html#install",
    "href": "pages/index.html#install",
    "title": "simplextree",
    "section": "Install",
    "text": "Install\nThe easiest way to install the package is via the platform-specific wheels on pypi.\npython -m pip install simplextree \nYou can also pip install the package manually by downloading the appropriate wheel (or sdist) from the releases.\nFor installation instructions for developers looking to extend the package, see Building & Developing."
  },
  {
    "objectID": "pages/index.html#building-developing",
    "href": "pages/index.html#building-developing",
    "title": "simplextree",
    "section": "Building & Developing",
    "text": "Building & Developing\nIf you would like to build the package yourself for development reasons, a typical workflow is to install the build-time dependencies first:\npython -m pip install meson-python ninja pybind11 numpy\nThen, build and install the package in editable mode (see also meson-python notes), optionally without build isolation for speed:\npython -m pip install --no-build-isolation --editable .\nUnit testing is handled with pytest. See the gh-workflows for platform-specific configuration."
  },
  {
    "objectID": "pages/index.html#native-extensions",
    "href": "pages/index.html#native-extensions",
    "title": "simplextree",
    "section": "Native Extensions",
    "text": "Native Extensions\nThe underlying C++ library is header-only and may be included as a dependency by extension modules in other Python packages.\nThus, to modify or extending the complex in C++, it is sufficient to add the package as a build-time dependency and append the include directory to the compilation target."
  },
  {
    "objectID": "pages/reference/index.html",
    "href": "pages/reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "SimplexTree\nSimplexTree provides lightweight wrapper around a Simplex Tree data structure.\n\n\n\n\n\n\n\n\n\nUnionFind\nUnion Find data structure"
  },
  {
    "objectID": "pages/reference/index.html#simplex-tree",
    "href": "pages/reference/index.html#simplex-tree",
    "title": "API Reference",
    "section": "",
    "text": "SimplexTree\nSimplexTree provides lightweight wrapper around a Simplex Tree data structure."
  },
  {
    "objectID": "pages/reference/index.html#union-find",
    "href": "pages/reference/index.html#union-find",
    "title": "API Reference",
    "section": "",
    "text": "UnionFind\nUnion Find data structure"
  },
  {
    "objectID": "pages/reference/SimplexTree.html",
    "href": "pages/reference/SimplexTree.html",
    "title": "SimplexTree",
    "section": "",
    "text": "SimplexTree(self, simplices=None)\nSimplexTree provides lightweight wrapper around a Simplex Tree data structure.\nThis class exposes a native extension module wrapping a simplex tree implemented with modern C++.\nThe Simplex Tree was originally introduced in the paper: &gt; Boissonnat, Jean-Daniel, and Clément Maria. “The simplex tree: An efficient data structure for general simplicial complexes.” Algorithmica 70.3 (2014): 406-427."
  },
  {
    "objectID": "pages/reference/SimplexTree.html#the-simplex-tree-was-originally-introduced-in-the-paper",
    "href": "pages/reference/SimplexTree.html#the-simplex-tree-was-originally-introduced-in-the-paper",
    "title": "SimplexTree",
    "section": "",
    "text": "UNHANDLED ADMONITION"
  },
  {
    "objectID": "pages/reference/SimplexTree.html#attributes",
    "href": "pages/reference/SimplexTree.html#attributes",
    "title": "SimplexTree",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nType\nDescription\n\n\n\n\nn_simplices\nndarray\nnumber of simplices\n\n\ndimension\nint\nmaximal dimension of the complex\n\n\nid_policy\nstr\npolicy for generating new vertex ids"
  },
  {
    "objectID": "pages/reference/SimplexTree.html#properties",
    "href": "pages/reference/SimplexTree.html#properties",
    "title": "SimplexTree",
    "section": "Properties",
    "text": "Properties\n\n\n\nName\nType\nDescription\n\n\n\n\nvertices\nndarray\n0-simplices in the complex.\n\n\nedges\nndarray\n1-simplices in the complex.\n\n\ntriangles\nndarray\n2-simplices in the complex.\n\n\nquads\nndarray\n3-simplices in the complex.\n\n\nconnected_components\nndarray\nconnected component ids."
  },
  {
    "objectID": "pages/reference/SimplexTree.html#methods",
    "href": "pages/reference/SimplexTree.html#methods",
    "title": "SimplexTree",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nadjacent\nChecks for adjacencies between simplices.\n\n\ncard\nReturns the cardinality of various skeleta of the complex.\n\n\ncoface_roots\nReturns the roots whose subtrees span the cofaces of sigma.\n\n\ncofaces\nReturns the cofaces of sigma.\n\n\ncollapse\nPerforms an elementary collapse on two given simplices.\n\n\ndegree\nComputes the degree of select vertices in the trie.\n\n\nexpand\nPerforms a k-expansion of the complex.\n\n\nfaces\nWrapper for simplices function.\n\n\nfind\nFinds whether simplices exist in Simplex Tree.\n\n\ninsert\nInserts simplices into the Simplex Tree.\n\n\nlink\nReturns the simplices in the link of sigma.\n\n\nmaximal\nReturns the maximal simplices in the complex.\n\n\nremove\nRemoves simplices into the Simplex Tree.\n\n\nsimplices\nReturns the p-simplices in the complex.\n\n\nskeleton\nReturns the simplices in the p-skeleton of sigma.\n\n\ntraverse\nTraverses the simplex tree in the specified order, calling f on each simplex encountered.\n\n\nvertex_collapse\nMaps a pair of vertices into a single vertex.\n\n\n\n\nadjacent\nSimplexTree.adjacent(self, simplices)\nChecks for adjacencies between simplices.\n\n\ncard\nSimplexTree.card(self, p=None)\nReturns the cardinality of various skeleta of the complex.\n\nParameters\np :  int, optional (default=None)\n\ndimension parameter. Defaults to None.\n\n\n\nReturns\ncardinalities :  Union[int, tuple], \n\nif p is an integer, the number of p-simplices in the complex. Otherwise a tuple indicating the number of simplices of all dimensions.\n\n\n\n\ncoface_roots\nSimplexTree.coface_roots(self, sigma=\\[\\])\nReturns the roots whose subtrees span the cofaces of sigma.\nNote that sigma itself is included in the set of its cofaces.\n\nParameters\nsigma :  Collection, optional (default=[])\n\nthe simplex to obtain cofaces of. Defaults to the empty set (root node).\n\n\n\nReturns\ncoface_roots :  list[Collection], \n\nthe coface roots of sigma.\n\n\n\n\ncofaces\nSimplexTree.cofaces(self, sigma=\\[\\])\nReturns the cofaces of sigma.\nNote, by definition, sigma itself is considered as a coface.\n\nParameters\nsigma :  Collection, optional (default=[])\n\nthe simplex to obtain cofaces of.\n\n\n\nReturns\ncofaces :  list[Collection], \n\nthe cofaces of sigma.\n\n\n\n\ncollapse\nSimplexTree.collapse(self, tau, sigma)\nPerforms an elementary collapse on two given simplices.\nChecks whether its possible to collapse \\sigma through \\tau, and if so, both simplices are removed. A simplex \\sigma is said to be collapsible through one of its faces \\tau if \\sigma is the only coface of \\tau (excluding \\tau itself).\n\nParameters\nsigma :  Collection, required\n\nmaximal simplex to collapse\n\ntau :  Collection, required\n\nface of sigma to collapse\n\n\n\nReturns\ncollapsed :  bool, \n\nwhether the pair was collapsed\n\n\n\nExamples\nfrom splex import SimplexTree st = SimplexTree([[0,1,2]]) print(st)\nst.collapse([1,2], [0,1,2])\nprint(st)\n\n\n\ndegree\nSimplexTree.degree(self, vertices=None)\nComputes the degree of select vertices in the trie.\n\nParameters\nvertices :  ArrayLike, optional (default=None)\n\nRetrieves vertex degrees If no vertices are specified, all degrees are computed. Non-existing vertices by default have degree 0.\n\n\n\nReturns\ndegrees :  Union[ArrayLike, int], \n\ndegree of each vertex id given in ‘vertices’.\n\n\n\n\nexpand\nSimplexTree.expand(self, k, f=None)\nPerforms a k-expansion of the complex.\nThis function is particularly useful for expanding clique complexes beyond their 1-skeleton.\n\nParameters\nk :  int, required\n\nmaximum dimension to expand to.\n\nf :  Callable[[Collection], bool], optional (default=None)\n\nboolean predicate which returns whether a simplex should added to the complex (and further expanded).\n\n\n\nExamples\nfrom simplextree import SimplexTree from itertools import combinations st = SimplexTree(combinations(range(8), 2)) print(st)\nst.expand(k=2, lambda s: 2 in s) # Expand only triangles containing 2 as a vertex print(st)\nst.expand(k=2) # Expand all 2-cliques print(st)\n\n\n\nfaces\nSimplexTree.faces(self, p=None, sigma=\\[\\], **kwargs)\nWrapper for simplices function.\n\n\nfind\nSimplexTree.find(self, simplices)\nFinds whether simplices exist in Simplex Tree.\n\nParameters\nsimplices :  Iterable[Collection], required\n\nIterable of simplices to insert (each of which are SimplexLike)\n\n\n\nReturns\nfound :  np.ndarray, \n\nboolean array indicating whether each simplex was found in the complex\n\n\n\n\n\n\n\nNote\n\n\n\n    If the iterable is an 2-dim np.ndarray, then the p-simplex to find is given by each contiguous p+1 stride.\n    Otherwise, each element of the iterable to casted to a Simplex and then searched for in the tree. \n\n\n\n\n\ninsert\nSimplexTree.insert(self, simplices)\nInserts simplices into the Simplex Tree.\nBy definition, inserting a simplex also inserts all of its faces. If the simplex already exists in the complex, the tree is not modified.\n\nParameters\nsimplices :  Iterable[Collection], required\n\nIterable of simplices to insert (each of which are SimplexLike)\n\n\n\n\n\n\n\nNote\n\n\n\n    If the iterable is an 2-dim np.ndarray, then a p-simplex is inserted along each contiguous p+1 stride.\n    Otherwise, each element of the iterable to casted to a Simplex and then inserted into the tree. \n\n\n\n\nExamples\n\nfrom simplextree import SimplexTree\nst = SimplexTree([range(3)])\nprint(st)\n\nSimplex Tree with (3, 3, 1) (0, 1, 2)-simplices\n\n\n\nst.insert([[0,1]])\nprint(st)\n\nSimplex Tree with (3, 3, 1) (0, 1, 2)-simplices\n\n\n\n\n\nlink\nSimplexTree.link(self, sigma=\\[\\])\nReturns the simplices in the link of sigma.\n\n\nmaximal\nSimplexTree.maximal(self)\nReturns the maximal simplices in the complex.\n\n\nremove\nSimplexTree.remove(self, simplices)\nRemoves simplices into the Simplex Tree.\nBy definition, removing a face also removes all of its cofaces. If the simplex does not exist in the complex, the tree is not modified.\n\nParameters\nsimplices :  Iterable[Collection], required\n\nIterable of simplices to insert (each of which are SimplexLike).\n\n\n\n\n\n\n\nNote\n\n\n\n    If the iterable is an 2-dim np.ndarray, then a p-simplex is removed along each contiguous p+1 stride.\n    Otherwise, each element of the iterable to casted to a Simplex and then removed from the tree. \n\n\n\n\nExamples\nst = SimplexTree([range(3)]) print(st) st.remove([[0,1]]) print(st)\n\n\n\nsimplices\nSimplexTree.simplices(self, p=None)\nReturns the p-simplices in the complex.\n\n\nskeleton\nSimplexTree.skeleton(self, p=None, sigma=\\[\\])\nReturns the simplices in the p-skeleton of sigma.\nNote that, when dim(sigma) &lt;= p, sigma is included in the skeleton.\n\nParameters\np :  int, optional (default=None)\n\nthe dimension of the skeleton.\n\nsigma :  Collection, optional (default=[])\n\nthe simplex to obtain cofaces of. Defaults to the empty set (root node).\n\n\n\nReturns\nlist :  Iterable[Collection], \n\nthe simplices in the p-skeleton of sigma.\n\n\n\n\ntraverse\nSimplexTree.traverse(self, order='preorder', f=print, sigma=\\[\\], p=0)\nTraverses the simplex tree in the specified order, calling f on each simplex encountered.\nSupported traversals include breadth-first / level order (“bfs”, “levelorder”), depth-first / prefix (“dfs”, “preorder”). faces, cofaces, coface roots (“coface_roots”), p-skeleton, p-simplices, maximal simplices (“maximal”), and link.\nWhere applicable, each traversal begins its traversal sigma, which defaults to the empty set (root node).\n\nParameters\norder :  str, optional (default=‘preorder’)\n\nthe type of traversal of the simplex tree to execute.\n\nf :  Callable, optional (default=print)\n\na function to evaluate on every simplex in the traversal. Defaults to print.\n\nsigma :  Collection, optional (default=[])\n\nsimplex to start the traversal at, where applicable. Defaults to the root node (empty set).\n\np :  int, optional (default=0)\n\ndimension of simplices to restrict to, where applicable. Defaults to 0.\n\n\n\n\nvertex_collapse\nSimplexTree.vertex_collapse(self, u, v, w)\nMaps a pair of vertices into a single vertex.\n\nParameters\nu :  int, required\n\nthe first vertex in the free pair.\n\nv :  int, required\n\nthe second vertex in the free pair.\n\nw :  int, required\n\nthe target vertex to collapse to.\n\n\n\nReturns\ncollapsed :  bool, \n\nwhether the collapse was performed."
  },
  {
    "objectID": "pages/reference/SimplexTree.html#expand-only-triangles-containing-2-as-a-vertex",
    "href": "pages/reference/SimplexTree.html#expand-only-triangles-containing-2-as-a-vertex",
    "title": "SimplexTree",
    "section": "",
    "text": "st.expand(k=2, lambda s: 2 in s) print(st)"
  },
  {
    "objectID": "pages/reference/SimplexTree.html#expand-all-2-cliques",
    "href": "pages/reference/SimplexTree.html#expand-all-2-cliques",
    "title": "SimplexTree",
    "section": "",
    "text": "st.expand(k=2) print(st)\n\n\nSimplexTree.faces(self, p=None, sigma=\\[\\], **kwargs)\nWrapper for simplices function.\n\n\n\nSimplexTree.find(self, simplices)\nFinds whether simplices exist in Simplex Tree.\n\n\nsimplices :  Iterable[Collection], required\n\nIterable of simplices to insert (each of which are SimplexLike)\n\n\n\n\nfound :  np.ndarray, \n\nboolean array indicating whether each simplex was found in the complex\n\n\n\n\n\n\n\nNote\n\n\n\n    If the iterable is an 2-dim np.ndarray, then the p-simplex to find is given by each contiguous p+1 stride.\n    Otherwise, each element of the iterable to casted to a Simplex and then searched for in the tree. \n\n\n\n\n\n\nSimplexTree.insert(self, simplices)\nInserts simplices into the Simplex Tree.\nBy definition, inserting a simplex also inserts all of its faces. If the simplex already exists in the complex, the tree is not modified.\n\n\nsimplices :  Iterable[Collection], required\n\nIterable of simplices to insert (each of which are SimplexLike)\n\n\n\n\n\n\n\nNote\n\n\n\n    If the iterable is an 2-dim np.ndarray, then a p-simplex is inserted along each contiguous p+1 stride.\n    Otherwise, each element of the iterable to casted to a Simplex and then inserted into the tree. \n\n\n\n\n\n\nSimplexTree.link(self, sigma=\\[\\])\nReturns the simplices in the link of sigma.\n\n\n\nSimplexTree.maximal(self)\nReturns the maximal simplices in the complex.\n\n\n\nSimplexTree.remove(self, simplices)\nRemoves simplices into the Simplex Tree.\nBy definition, removing a face also removes all of its cofaces. If the simplex does not exist in the complex, the tree is not modified.\n\n\nsimplices :  Iterable[Collection], required\n\nIterable of simplices to insert (each of which are SimplexLike).\n\n\n\n\n\n\n\nNote\n\n\n\n    If the iterable is an 2-dim np.ndarray, then a p-simplex is removed along each contiguous p+1 stride.\n    Otherwise, each element of the iterable to casted to a Simplex and then removed from the tree. \n\n\n\n\n\nst = SimplexTree([range(3)]) print(st) st.remove([[0,1]]) print(st)\n\n\n\n\nSimplexTree.simplices(self, p=None)\nReturns the p-simplices in the complex.\n\n\n\nSimplexTree.skeleton(self, p=None, sigma=\\[\\])\nReturns the simplices in the p-skeleton of sigma.\nNote that, when dim(sigma) &lt;= p, sigma is included in the skeleton.\n\n\np :  int, optional (default=None)\n\nthe dimension of the skeleton.\n\nsigma :  Collection, optional (default=[])\n\nthe simplex to obtain cofaces of. Defaults to the empty set (root node).\n\n\n\n\nlist :  Iterable[Collection], \n\nthe simplices in the p-skeleton of sigma.\n\n\n\n\n\nSimplexTree.traverse(self, order='preorder', f=print, sigma=\\[\\], p=0)\nTraverses the simplex tree in the specified order, calling f on each simplex encountered.\nSupported traversals include breadth-first / level order (“bfs”, “levelorder”), depth-first / prefix (“dfs”, “preorder”). faces, cofaces, coface roots (“coface_roots”), p-skeleton, p-simplices, maximal simplices (“maximal”), and link.\nWhere applicable, each traversal begins its traversal sigma, which defaults to the empty set (root node).\n\n\norder :  str, optional (default=‘preorder’)\n\nthe type of traversal of the simplex tree to execute.\n\nf :  Callable, optional (default=print)\n\na function to evaluate on every simplex in the traversal. Defaults to print.\n\nsigma :  Collection, optional (default=[])\n\nsimplex to start the traversal at, where applicable. Defaults to the root node (empty set).\n\np :  int, optional (default=0)\n\ndimension of simplices to restrict to, where applicable. Defaults to 0.\n\n\n\n\n\nSimplexTree.vertex_collapse(self, u, v, w)\nMaps a pair of vertices into a single vertex.\n\n\nu :  int, required\n\nthe first vertex in the free pair.\n\nv :  int, required\n\nthe second vertex in the free pair.\n\nw :  int, required\n\nthe target vertex to collapse to.\n\n\n\n\ncollapsed :  bool, \n\nwhether the collapse was performed."
  },
  {
    "objectID": "pages/reference/UnionFind.html",
    "href": "pages/reference/UnionFind.html",
    "title": "UnionFind",
    "section": "",
    "text": "UnionFind\nUnionFind(n)\nUnion Find data structure"
  },
  {
    "objectID": "temp_file.html",
    "href": "temp_file.html",
    "title": "",
    "section": "",
    "text": "from simplextree import SimplexTree\nst = SimplexTree([range(3)])\nprint(st)\nst.insert([[0,1]])\nprint(st)\n\nSimplex Tree with (3, 3, 1) (0, 1, 2)-simplices\nSimplex Tree with (3, 3, 1) (0, 1, 2)-simplices"
  }
]